FORMAT: 1A
HOST: BackendDomain:80/api

# Custom Shopping Mall Service API

## Roles
- **SuperAdmin**: A super administrator with the highest level of access, capable of managing other administrators.
- **Admin**: A general administrator who can manage users, categories, items, etc.
- **User**: A regular user who can use the shopping mall features.
- **Public**: Anyone, including users who are not logged in.

-------
## Group Authentication
-------
### Sign up for an account [POST /signup]
- **Required Role**: Public
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
        + DuplicateNameException - Duplicate ID exists
        + PasswordMismatchException - Password mismatch
        + DateTimeParseException - Unable to convert the birthdate string to LocalDate
    + Response Code: 500
        + Exception - Internal server error occurred

+ Request (application/json)
    + Attributes (SignUpDto)
+ Response 201 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 400 (application/json)
    + DuplicateNameException, PasswordMismatchException, DateTimeParseException
    + Attributes (ErrorAttributes)
+ Response 500 (application/json)
    + Attributes (Exception)

### Verify ID during sign up [POST /check-id]
- **Required Role**: Public
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
        + DuplicateNameException - Duplicate ID exists
    + Response Code: 500
        + Exception - Internal server error occurred
+ Request (application/json)
    + Attributes (IdentificationRequestDto)
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 400 (application/json)
    + DuplicateNameException
    + Attributes (ErrorAttributes)
+ Response 500 (application/json)
    + Attributes (Exception)


### Login [POST /login]
- **Required Role**: Public
- **Exception**: 
    + Response Code: 400
        + BadCredentialsException - Credentials provided are invalid
    + Response Code: 500
        + Exception - Internal server error occurred
+ Request (application/json)
    + Attributes(LoginRequestDto)
+ Response 201 (application/json)
    + Attributes(LoginResponseDto)
+ Response 400 (application/json)
    + Attributes (BadCredentialsException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Logout [POST /logout]
- **Required Role**: User/Admin/SuperAdmin
- **Exception**: 
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 500
        + Exception - Internal server error occurred
+ Request
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN}
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Get CSRF token [GET /csrf-token]
- **Required Role**: Public
- **Exception**: 
    + Response Code: 500
        + Exception - Internal server error occurred
+ Request 
+ Response 200 (application/json)
    + Attributes (CSRF_Token)
+ Response 500 (application/json)
    + Attributes (Exception)

### Refresh access token [POST /refresh-token]
- **Required Role**: Public
- **Exception**: 
    + Response Code: 400
        + InvalidTokenException - token is invalid
    + Response Code: 404
        + NotFoundException - user associated with the refresh token is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Request (application/json)
    + Attributes (RefreshTokenRequest)
+ Response 200 (application/json)
    + Attributes (RefreshTokenResponse)
+ Response 400 (application/json)
    + Attributes (InvalidTokenException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

-----
## Group SuperAdmin 
-----
### Create admin account [POST /super-admin/admins]
- **Required Role**: SuperAdmin
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
        + DuplicateNameException - Duplicate ID exists
        + PasswordMismatchException - Password mismatch
        + DateTimeParseException - Unable to convert the birthdate string to LocalDate
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 500
        + Exception - Internal server error occurred
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (SignUpDto)
+ Response 201 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 400 (application/json)
    + DuplicateNameException, PasswordMismatchException, DateTimeParseException
    + Attributes (ErrorAttributes)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 500 (application/json)
    + Attributes (Exception)

### View admin accounts [GET /super-admin/admins?page={page}&size={size}]
- **Required Role**: SuperAdmin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + page: `0` (number, optional) - The page number to retrieve, starting from 0
    + size: `10` (number, optional) - The number of items per page
+ Request 
    + Headers 
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (Pagination)
        + content (array[AdminResponseDto])
+ Response 400 (applicaation/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Patch admin accounts [PATCH /super-admin/admins/{userId}]
- **Required Role**: SuperAdmin
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException - the user is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId - The ID of the admin
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (PatchAdminDto)
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 400 (application/json)
    + TypeMismatchException
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Delete admin accounts [DELETE /super-admin/admins/{userId}]
- **Required Role**: SuperAdmin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The user is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId - The ID of the admin
+ Request 
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

-------
## Group Admin
------
### View user accounts [GET /admin/users?page={page}&size={size}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + page: `0` (number, optional) - The page number to retrieve, starting from 0
    + size: `10` (number, optional) - The number of items per page
+ Request
    + Headers 
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (Pagination)
        + content (array[UserResponseDto])
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Retrieve user details [GET /admin/users/{userId}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The user is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId - The ID of the user
+ Request (application/json)
    + Headers 
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (UserSummaryDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Create product category [POST /admin/categories]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + DuplicateNameException - Duplicate name exists
        + MethodArgumentNotValidException - Validation failed 
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 500
        + Exception - Internal server error occurred
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (CategoryRequestDto)
+ Response 201 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 400 (application/json)
    + DuplicateNameException
    + Attributes (DuplicateNameException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 500 (application/json)
    + Attributes (Exception)

### View product categories [GET /admin/categories?page={page}&size={size}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + page: `0` (number, optional) - The page number to retrieve, starting from 0
    + size: `10` (number, optional) - The number of items per page
+ Request 
    + Headers 
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (Pagination)
        + content (array[CategoryResponseDto])
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Update product category [PUT /admin/categories/{categoryId}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
        + MethodArgumentNotValidException - Validation failed 
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The category is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + categoryId - The ID of the category
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (CategoryRequestDto)
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 400 (application/json)
    + TypeMismatchException
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Delete product category [DELETE /admin/categories/{categoryId}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The category is not found
    + Response Code: 409
        + HasRelatedEntitiesException - The category contains related entities (items) and cannot be deleted
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + categoryId - The ID of the category
+ Request 
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 409 (application/json)
    + Attributes (HasRelatedEntitiesException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Create item [POST /admin/items]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
        + IllegalArgumentException - Unknown storage type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  Item or category not found
    + Response Code: 500
        + ImageUploadException - Image upload failed
        + Exception - Internal server error occurred
+ Request (multipart/form-data)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Body


        --boundary_string
        Content-Disposition: form-data; name="item"
        Content-Type: application/json
        {
            "name": string - Name must be between 3 and 50 characters. Name is a required field.
            "price": number - Price must be greater than or equal to 0. Price is a required field.
            "stock": number - Stock must be greater than or equal to 0. Stock is a required field.
            "keyword": string - Keyword must start with # and be followed by words separated by #. Keyword must be between 3 and 50 characters. Keyword is a required field.
            "categoryIds": [1, 2, 3] // Example of category IDs array
        }

        --boundary_string
        Content-Disposition: form-data; name="images"; filename="image1.jpg" 
        Content-Type: image/jpeg 

        (binary data)

        --boundary_string
        Content-Disposition: form-data; name="images"; filename="image2.jpeg" 
        Content-Type: image/jpeg 

        (binary data)

        --boundary_string
        Content-Disposition: form-data; name="images"; filename="image3.png" 
        Content-Type: image/png 

        (binary data)

        --boundary_string--
+ Response 201 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + IllegalArgumentException
    + Attributes (IllegalArgumentException)
+ Response 400 (application/json)
    + MethodArgumentNotValidException
    + Attributes (MethodArgumentNotValidException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + ImageUploadException, Exception
    + Attributes (Exception)

### Edit item [PATCH /admin/items/{itemId}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
        + IllegalArgumentException - Unknown storage type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  Category or item or image not found
    + Response Code: 500
        + ImageUploadException - Image upload failed
        + Exception - Internal server error occurred
+ Parameters
    + itemId - The ID of the item
+ Request (multipart/form-data)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Body


        --boundary_string
        Content-Disposition: form-data; name="item"
        Content-Type: application/json
        {
            "name": string - Name must be between 3 and 50 characters. 
            "price": number - Price must be greater than or equal to 0. 
            "keyword": string - Keyword must start with # and be followed by words separated by #. Keyword must be between 3 and 50 characters. 
            "categoryIds": [1, 2, 3] // Example of category IDs array

            // Only include fields that need to be updated
        }

        --boundary_string
        Content-Disposition: form-data; name="addImages"; filename="image1.jpg" 
        Content-Type: image/jpeg 

        (binary data)

        --boundary_string
        Content-Disposition: form-data; name="addImages"; filename="image2.jpeg" 
        Content-Type: image/jpeg 

        (binary data)

        --boundary_string
        Content-Disposition: form-data; name="addImages"; filename="image3.png" 
        Content-Type: image/png 

        (binary data)

        --boundary_string--
        Content-Disposition: form-data; name="removeImageIds"
        Content-Type: application/json

        [4, 5]  // Example IDs of images to be removed
        --boundary_string--
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 400 (application/json)
    + TypeMismatchException, IllegalArgumentException
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + ImageUploadException, Exception
    + Attributes (Exception)

### Mark item as invalid [PATCH /admin/items/{itemId}/invalid]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The item is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + itemId - The ID of the item
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)


### validate item [PATCH /admin/items/{itemId}/valid]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The item is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + itemId - The ID of the item
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Update stock levels [PATCH /admin/items/{itemId}/stock]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException - The item is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + itemId - The ID of the item
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (UpdateStockDto)
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 400 (application/json)
    + TypeMismatchException
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Create a new coupon [POST /admin/coupons]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 500
        + Exception - Internal server error occurred
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (CouponRequestDto)
+ Response 201 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Update an existing coupon [PATCH /admin/coupons/{couponId}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
        + MethodArgumentNotValidException - Validation failed 
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException - The coupon is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + couponId - The ID of the coupon
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (PatchCouponRequestDto)
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 400 (application/json)
    + TypeMismatchException
    + Attributes (DuplicateNameException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Delete a coupon [DELETE /admin/coupons/{couponId}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The coupon is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + couponId - The ID of the coupon
+ Request 
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Assign coupon to a user [POST /admin/coupons/{couponId}/assign/{userId}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  Coupon or user not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + couponId - The ID of the coupon
    + userId - The ID of the user
+ Request 
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Assign coupon to all user [POST /admin/coupons/{couponId}/assign/all] 
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The coupon is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + couponId - The ID of the coupon
+ Request 
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

#### View all coupons [GET /admin/coupons?page={page}&size={size}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + page: `0` (number, optional) - The page number to retrieve, starting from 0
    + size: `10` (number, optional) - The number of items per page
+ Request 
    + Headers 
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (Pagination)
        + content (array[CouponResponseDto])
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)


### View user coupons [GET /admin/coupons/users/{userId}?page={page}&size={size}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The user is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + page: `0` (number, optional) - The page number to retrieve, starting from 0
    + size: `10` (number, optional) - The number of items per page
+ Request 
    + Headers 
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (Pagination)
        + content (array[UserCouponResponseDto])
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)


### Create notice [POST /admin/notices]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 500
        + Exception - Internal server error occurred
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (NoticeRequestDto)
+ Response 201 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + Attributes (MethodArgumentNotValidException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 500 (application/json)
    + Attributes (Exception)


### Post notice to a user [POST /admin/notices/{noticeId}/assign/{userId}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  Notice or user not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + noticeId - The ID of the notice
    + userId - The ID of the user
+ Request 
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Post notice to all user [POST /admin/notices/{noticeId}/assign/all]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The notice is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + noticeId - The ID of the notice
+ Request 
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Edit notice [PATCH /admin/notices/{noticeId}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
        + MethodArgumentNotValidException - Validation failed 
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException - The notice is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + noticeId - The ID of the notice
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (PatchNoticeRequestDto)
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 400 (application/json)
    + TypeMismatchException 
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Delete notice [DELETE /admin/notices/{noticeId}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException - The notice is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + noticeId - The ID of the notice
+ Request 
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)


### Notify users about stock alerts [POST /admin/notices/items/{itemId}/notify-stock-alert]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException - The item is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + itemId - The ID of the item
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Notify users if cart items invalidated [POST /admin/notices/items/{itemId}/notify-cart-item-invalidation]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException - The item is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + itemId - The ID of the item
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)



### View inquiries [GET /admin/inquiries?type={type}&status={status}&page={page}&size={size}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + type - The type criteria (one of `item`, `customer`)
    + status (optional) - The status criteria (one of `resolved`, `unresolved`)
    + page: `0` (number, optional) - The page number to retrieve, starting from 0
    + size: `10` (number, optional) - The number of items per page
+ Request 
    + Headers 
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (Pagination)
        + content (array[InquiryResponseDto])
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 500 (application/json)
    + Attributes (Exception)


### Retrieve inquiry details [GET /admin/inquiries/{inquiryId}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The inquiry is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + inquiryId - The ID of the inquiry
+ Request 
    + Headers 
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (InquiryDetailResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)



### Respond to inquiry [POST /admin/inquiries/{inquiryId}/responds]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException - The inquiry is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + inquiryId - The ID of the inquiry
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (ReplyRequestDto)
+ Response 201 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + TypeMismatchException 
    + Attributes (TypeMismatchException)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Edit response [PATCH /admin/inquiries/{inquiryId}/responses/{responseId}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
        + MethodArgumentNotValidException - Validation failed 
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException - Inquiry or response not found
    + Response Code: 409
        + HasRelatedEntitiesException - The respond contains related entities (responses) and cannot be edited
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + inquiryId - The ID of the inquiry
    + responseId - The ID of the response
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (PatchReplyRequestDto)
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + TypeMismatchException 
    + Attributes (TypeMismatchException)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 409 (application/json)
    + Attributes (HasRelatedEntitiesException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Delete response [DELETE /admin/inquiries/{inquiryId}/responses/{responseId}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException - Inquiry or response not found
    + Response Code: 409
        + HasRelatedEntitiesException - The response contains related entities (responses) and cannot be deleted
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + inquiryId - The ID of the inquiry
    + responseId - The ID of the response
+ Request
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 409 (application/json)
    + Attributes (HasRelatedEntitiesException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Respond to parent Response [POST /admin/inquiries/{inquiryId}/responses/{responseId}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException - Inquiry or respond not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + inquiryId - The ID of the inquiry
    + responseId - The ID of the parent response
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (ReplyRequestDto)
+ Response 201 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + TypeMismatchException 
    + Attributes (TypeMismatchException)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Retrieve user order details [GET /admin/orders/users/{userId}?page={page}&size={size}]
- **Required Role**: Admin
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The user is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + page: `0` (number, optional) - The page number to retrieve, starting from 0
    + size: `10` (number, optional) - The number of items per page
+ Request 
    + Headers 
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (Pagination)
        + content (array[OrderDetailsResponseDto])
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

-------

## Group User 

------

### Get user details [GET /users/{userId}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The user is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
+ Request 
    + Headers 
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (UserSummaryDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)
### Update user details [PATCH /users/{userId}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The user is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (PatchUserDetailsReqeustDto)
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 400 (application/json)
    + TypeMismatchException 
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Add Delivery address [POST /users/{userId}/deliveryAddresses]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The user is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (DeliveryAddressRequestDto)
+ Response 201 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + TypeMismatchException 
    + Attributes (TypeMismatchException)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)
### Edit Delivery address [PUT /users/{userId}/deliveryAddresses/{deliveryAddressId}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  User or deliveryAddress is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + deliveryAddressId - The ID of the deliveryAddress
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (DeliveryAddressRequestDto)
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + TypeMismatchException 
    + Attributes (TypeMismatchException)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)
### Delete Delivery address [DELETE /users/{userId}/deliveryAddresses/{deliveryAddressId}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  User or deliveryAddress is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + deliveryAddressId - The ID of the deliveryAddress
+ Request 
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + TypeMismatchException 
    + Attributes (TypeMismatchException)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)
### View all notices [GET /users/{userId}/notices?page={page}&size={size}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The user is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + page: `0` (number, optional) - The page number to retrieve, starting from 0
    + size: `10` (number, optional) - The number of items per page
+ Request 
    + Headers 
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (Pagination)
        + content (array[NoticeResponseDto])
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)
### Retrieve notice details [GET /users/{userId}/notices/{noticeId}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  User or notice not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + noticeId  - The ID of the notice
+ Request 
    + Headers 
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (NoticeDetailResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)
### View coupons [GET /users/{userId}/coupons/?status={status}&page={page}&size={size}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The user is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + status: (string, optional) - The status criteria (one of `available`, `invalid`, 'used')
    + page: `0` (number, optional) - The page number to retrieve, starting from 0
    + size: `10` (number, optional) - The number of items per page
+ Request 
    + Headers 
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (Pagination)
        + content (array[CouponSummaryResponseDto])
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)
### Retrieve coupon details [GET /users/{userId}/coupons/{couponId}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The user does not exist, the coupon does not exist, or the user does not have the specified coupon
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + couponId  - The ID of the coupon
+ Request 
    + Headers 
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (CouponDetailResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Add items to the cart [POST /users/{userId}/carts/{itemId}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
        + InvalidOperationException - The item is invalid for some reasons
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  User or item not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + itemId  - The ID of the item
+ Request 
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes(AddCartItemRequestDto)
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + TypeMismatchException, InvalidOperationException 
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Update item quantities [PATCH /users/{userId}/carts/{itemId}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
        + InvalidOperationException - Out of stock or item is invalid for some reasons 
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  User or item not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + itemId  - The ID of the item
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (UpdateQuantityRequestDto)
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 400 (application/json)
    + TypeMismatchException, InvalidOperationException
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Remove items from the Cart [DELETE /users/{userId}/carts/{itemId}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  User or cartItem not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + itemId  - The ID of the item
+ Request 
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)


### Apply coupon [POST /users/{userId}/carts/coupons/{couponId}/apply]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
        + InvalidOperationException - Expired or has already been used
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The user does not exist or the user does not have the specified coupon
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + couponId  - The ID of the coupon
+ Request 
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + TypeMismatchException, InvalidOperationException 
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)


### Remove applied coupon [DELETE /users/{userId}/carts/coupons/remove]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
        + InvalidOperationException - No coupon applied to remove
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The user does not exist
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
+ Request 
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + TypeMismatchException, InvalidOperationException 
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Add items to the wishlist [POST /users/{userId}/wishlists/{itemId}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  User or item not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + itemId  - The ID of the item
+ Request 
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Remove items from the wishlist [DELETE /users/{userId}/wishlists/{itemId}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  User or wishItem not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + itemId  - The ID of the item
+ Request 
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)
    
### Submit review for purchased items [POST /users/{userId}/items/{itemId}/reviews]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
        + InvalidOperationException - The item is invalid for some reasons 
        + MethodArgumentNotValidException - Validation failed 
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  User or item not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + itemId  - The ID of the item
+ Request (multipart/form-data)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Body


        --boundary_string
        Content-Disposition: form-data; name="reivew"
        Content-Type: application/json
        {
            "title": string - Title must be between 3 and 100 characters. Title is a required field.
            "content": string - Content must be between 5 and 500 characters. Content is a required field.
        }

        --boundary_string
        Content-Disposition: form-data; name="images"; filename="image1.jpg" 
        Content-Type: image/jpeg 

        (binary data)

        --boundary_string
        Content-Disposition: form-data; name="images"; filename="image2.jpeg" 
        Content-Type: image/jpeg 

        (binary data)

        --boundary_string
        Content-Disposition: form-data; name="images"; filename="image3.png" 
        Content-Type: image/png 

        (binary data)

        --boundary_string--
+ Response 201 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + TypeMismatchException, InvalidOperationException 
    + Attributes (TypeMismatchException)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)


### Submit item inquiry [POST /users/{userId}/items/{itemId}/inquiries]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
        + InvalidOperationException - The item is invalid for some reasons 
        + MethodArgumentNotValidException - Validation failed 
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  User or item not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + itemId  - The ID of the item
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (InquriyRequestDto)
+ Response 201 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + TypeMismatchException, InvalidOperationException 
    + Attributes (TypeMismatchException)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Submit customer inquiry [POST /users/{userId}/customer/inquiries]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
        + InvalidOperationException - The item is invalid for some reasons 
        + MethodArgumentNotValidException - Validation failed 
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The user is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (InquriyRequestDto)
+ Response 201 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + TypeMismatchException, InvalidOperationException 
    + Attributes (TypeMismatchException)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### View submitted inquiries [GET /users/{userId}/inquiries?page={page}&size={size}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The user is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + page: `0` (number, optional) - The page number to retrieve, starting from 0
    + size: `10` (number, optional) - The number of items per page
+ Request 
    + Headers 
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (Pagination)
        + content (array[InquiryResponseDto])
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Retrieve submitted inquiry details [GET /users/{userId}/inquiries/{inquiryId}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The inquiry is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + userId - Teh ID of the user
    + inquiryId - The ID of the inquiry
+ Request 
    + Headers 
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (InquiryDetailResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Delete inquiry [DELETE /users/{userId}/inquiries/{inquiryId}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException - User or inquiry not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + userId - The ID of the user
    + inquiryId - The ID of the inquiry
+ Request
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Respond to Parent Response [POST /users/{userId}/inquiries/{inquiryId}/responses/{responseId}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException - User or inquiry or response not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + userId - The ID of the user
    + inquiryId - The ID of the inquiry
    + responseId - The ID of the parent response
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (ReplyRequestDto)
+ Response 201 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + TypeMismatchException 
    + Attributes (TypeMismatchException)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Edit Response [PATCH /users/{userId}/inquiries/{inquiryId}/responses/{responseId}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
        + MethodArgumentNotValidException - Validation failed 
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException - User or inquiry or response not found
    + Response Code: 409
        + HasRelatedEntitiesException - The respond contains related entities (responses) and cannot be edited
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + inquiryId - The ID of the inquiry
    + responseId - The ID of the response
+ Request (application/json)
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
    + Attributes (PatchReplyRequestDto)
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + TypeMismatchException 
    + Attributes (TypeMismatchException)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 409 (application/json)
    + Attributes (HasRelatedEntitiesException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Delete Response [DELETE /users/{userId}/inquiries/{inquiryId}/responses/{responseId}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException - User or inquiry or response not found
    + Response Code: 409
        + HasRelatedEntitiesException - The response contains related entities (responses) and cannot be deleted
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + userId - The ID of the user
    + inquiryId - The ID of the inquiry
    + responsId - The ID of the response
+ Request
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 409 (application/json)
    + Attributes (HasRelatedEntitiesException)
+ Response 500 (application/json)
    + Attributes (Exception)


### Order items [POST /users/{userId}/orders]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
        + InvalidOperationException - Out of stock or items are invalid for some reasons 
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The user is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
+ Request 
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + TypeMismatchException, InvalidOperationException 
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)
### View order details [GET /users/{userId}/orders?page={page}&size={size}]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  The user is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + page: `0` (number, optional) - The page number to retrieve, starting from 0
    + size: `10` (number, optional) - The number of items per page
+ Request 
    + Headers 
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (Pagination)
        + content (array[OrderDetailsResponseDto])
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### Subscribe to stock alerts for items [POST /users/{userId}/items/{itemId}/subscribe-stock-alerts]
- **Required Role**: User
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
        + InvalidOperationException - The item is invalid for some reasons 
    + Response Code: 403
        + AccessDeniedException 
    + Response Code: 404
        + NotFoundException -  User or item not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters
    + userId  - The ID of the user
    + itemId  - The ID of the item
+ Request 
    + Headers 
        X-XSRF-TOKEN: {X-XSRF-TOKEN}
        Authorization: Bearer {BEARER-TOKEN} 
+ Response 200 (application/json)
    + Attributes (ResponseDto)
+ Response 400 (application/json)
    + TypeMismatchException, InvalidOperationException 
    + Attributes (TypeMismatchException)
+ Response 403 (application/json)
    + Attributes (AccessDeniedException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception) 
------
## Group Public
-------

### Search items with keywords and filtering with category, min/max price range, average review rating [GET /items/search?keywords={keywords}&category={category}&minPrice={minPrice}&maxPrice={maxPrice}&minRating={minRating}&maxRating={maxRating}&page={page}&size={size}]
- **Required Role**: Public
- **Exception**: 
    + Response Code: 400
        + MethodArgumentNotValidException - Validation failed 
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 404
        + NotFoundException - keyword or category not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + keywords: (optional, array) - The search keywords (e.g., `keywords=clothes&keywords=tshirts`)
    + category: (optional, array) - The category IDs (e.g., `category=1&category=2`)
    + minPrice: `0` (number, optional) - The minimum price 
    + maxPrice: `99999999` (number, optional) - The maximum price
    + minRating: `0` (number, optional) - The minimum review rating
    + maxRating: `5` (number, optional) - The maximum review rating
    + page: `0` (number, optional) - The page number to retrieve, starting from 0
    + size: `10` (number, optional) - The number of items per page
+ Request 
+ Response 200 (application/json)
    + Attributes (Pagination)
        + content (array[ItemSummaryResponseDto])
+ Response 400 (application/json)
    + TypeMismatchException 
    + Attributes (TypeMismatchException)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)
### Retrieve item details [GET /items/{itemId}]
- **Required Role**: Public
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
    + Response Code: 404
        + NotFoundException - Item is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + itemId - The ID of the item
+ Request 
+ Response 200 (application/json)
    + Attributes (ItemDetailResponseDto)
+ Response 400 (application/json)
    + Attributes (TypeMismatchException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)

### View reviews by rating or latest for a specific item [GET /items/{itemId}/reviews?sort={sort}&page={page}&size={size}]
- **Required Role**: Public
- **Exception**: 
    + Response Code: 400
        + TypeMismatchException - Method argument (path variable or query parameter) cannot be converted to the expected type
        + MethodArgumentNotValidException - Validation failed 
    + Response Code: 404
        + NotFoundException - Item is not found
    + Response Code: 500
        + Exception - Internal server error occurred
+ Parameters 
    + itemId - The ID of the item
    + sort (optional) - The sorting criteria (one of `latest`, `oldest`, `rating_high`, `rating_low`)
    + page: `0` (number, optional) - The page number to retrieve, starting from 0
    + size: `10` (number, optional) - The number of items per page
+ Request 
+ Response 200 (application/json)
    + Attributes (Pagination)
        + content (array[ItemReviews])
+ Response 400 (application/json)
    + TypeMismatchException 
    + Attributes (TypeMismatchException)
+ Response 400 (application/json)
    + MethodArgumentNotValidException 
    + Attributes (MethodArgumentNotValidException)
+ Response 404 (application/json)
    + Attributes (NotFoundException)
+ Response 500 (application/json)
    + Attributes (Exception)



# Data Structures

## ValidationError (object)
+ fieldName: string 
+ validationMsg: string 

## ErrorAttributes (object)
+ apiPath: string - The path where the error occurred.
+ errorCode: number - The HTTP status code.
+ errorMessage: string - The error message.
+ errorTime: string - The time when the error occurred.


## MethodArgumentNotValidException (ErrorAttributes)
+ validationErrors (array[ValidationError]) 


## DuplicateNameException (ErrorAttributes)

## Exception (ErrorAttributes)

## PasswordMismatchException (ErrorAttributes)

## AccessDeniedException (ErrorAttributes)

## NotFoundException (ErrorAttributes)

## DateTimeParseException (ErrorAttributes)

## BadCredentialsException (ErrorAttributes)

## InvalidTokenException (ErrorAttributes)

## TypeMismatchException (ErrorAttributes)

## HasRelatedEntitiesException (ErrorAttributes)

## InvalidOperationException (ErrorAttributes)

## IllegalArgumentException (ErrorAttributes)
## ImageUploadException (ErrorAttributes)

## ResponseDto (object)
+ statusCode: number - The HTTP status code.
+ statusMessage: string - The response message. 

## SignUpDto (object)
+ identification: string - 6-10 character string containing both alphabets and numbers Consists only of alphabets and numbers. ID is a required field.
+ password: string - 8-15 character string containing alphabets, numbers, and special characters Special characters allowed `!@#$%^&*`. Password is a required field.
+ confirmPassword: string - Confirm Password is a required field.
+ name: string - Name is a required field.
+ birthDate: date - Birth Date must be in the format `yyyy-mm-dd`. Birth Date is a required field.
+ phoneNumber: string - 11-digit string consisting only of numbers. Phone Number must consist of 11 digits.

## IdentificationRequestDto (object)
+ identification: string - 6-10 character string containing both alphabets and numbers Consists only of alphabets and numbers. ID is a required field.


## LoginRequestDto (object)
+ identification: string
+ password: string

## LoginResponseDto (object)
+ accessToken: string 
+ refreshToken: string
+ userId: number

## CSRF_Token (object)
+ parameterName: `_csrf`
+ headerName: `X-XSRF-TOKEN`
+ token: string

## RefreshTokenRequest (object)
+ refreshToken: string

## RefreshTokenResponse (object)
+ accessToken: string

## Pagination (object)
+ currentPage: number
+ totalPages: number
+ totalItems: number

## AdminResponseDto (object)
+ id: number
+ identification: string
+ name: string
+ birthDate: date
+ phoneNumber: string 
+ creationTime: timestamp
+ lastModifiedTime: timestamp

## PatchAdminDto (object)
+ name: string - Name must be between 5 and 20 characters. 
+ password: string - 8-15 character string containing alphabets, numbers, and special characters Special characters allowed `!@#$%^&*`. 
+ phoneNumber: string - 11-digit string consisting only of numbers. Phone Number must consist of 11 digits.
+ role: Roles - Role must be one of the following: `USER`, `ADMIN`, `SUPER_ADMIN`

## UserResponseDto (object)
+ id: number
+ identification: string
+ name: string
+ birthDate: date
+ phoneNumber: string 
+ creationTime: timestamp
+ lastModifiedTime: timestamp

## Address (object)
+ addressId: number
+ zipCode: number
+ address: string
+ addressDetail: string

## UserSummaryDto (object)
+ id: number
+ identification: string
+ name: string
+ birthDate: date
+ phoneNumber: string
+ addresses (array[Address]) 
+ creationTime: timestamp
+ lastModifiedTime: timestamp

## CategoryRequestDto (object)
+ name: string - Name must be between 5 and 20 characters. name is a required field.

## CategoryResponseDto (object)
+ id: number 
+ name: string

## CategoryIds (object)
+ id: number - Category IDs cannot be empty.

## ItemRequestDto (object)
+ name: string - Name must be between 3 and 50 characters. Name is a required field.
+ price: number - Price must be greater than or equal to 0. Price is a required field.
+ stock: number - Stock must be greater than or equal to 0. Stock is a required field.
+ keyword: string - Keyword must start with # and be followed by words separated by #. Keyword must be between 3 and 50 characters. Keyword is a required field.
+ categoryIds (array[CategoryIds])

## UpdateStockDto (object)
+ stock: number - Stock must be greater than or equal to 0. Stock is a required field.

## CouponRequestDto (object)
+ discountType: DiscountType - DiscountType must be one of PERCENTAGE, FIXED. DiscountType is a required field.
+ discountValue: number - Discount value must be greater than or equal to 0. Discount value is a required field.
+ expirationDate: date - Expiration date must be in the future. Expiration date is a required field.

## PatchCouponRequestDto (object)
+ discountType: DiscountType - DiscountType must be one of PERCENTAGE, FIXED
+ discountValue: number - Discount value must be greater than or equal to 0. 
+ expirationDate: date - Expiration date must be in the future. 

## CouponResponseDto (object)
+ id: number
+ code: string
+ discountType: string
+ discountValue: number
+ expirationDate: date
+ creationTime: timestamp
+ lastModifiedTime: timestamp

## UserCouponResponseDto (object)
+ id: number
+ code: string
+ discountType: string
+ discountValue: number
+ expirationDate: date
+ isValid: boolean
+ isUsed: boolean
+ creationTime: timestamp
+ lastModifiedTime: timestamp

## NoticeRequestDto (object)
+ title: string - Title must be between 3 and 100 characters. Title is a required field.
+ content: string - Content must be between 5 and 500 characters. Content is a required field.

## PatchNoticeRequestDto (object)
+ title: string - Title must be between 3 and 100 characters. 
+ content: string - Content must be between 5 and 500 characters. 

## InquriyRequestDto (object)
+ title: string - Title must be between 3 and 100 characters. 
+ content: string - Content must be between 5 and 500 characters. 

## ReplyRequestDto (object)
+ content: string - Content must be between 5 and 500 characters. Content is a required field.

## PatchReplyRequestDto (object)
+ content: string - Content must be between 5 and 500 characters. 

## OrderItemResponseDto (object)
+ name: string
+ price: number
+ quantity: number
+ totalPrice: number 

## OrderDetailsResponseDto (object)
+ id : number
+ orderNumber: string
+ orderDate: date
+ orderStatus: string
+ item (array[OrderItemResponseDto])
+ finalAmount: number
+ receiver: string
+ phoneNumber: string
+ zipCode: number
+ address: string
+ addressDetail: string 
+ couponCode: number
+ total_amount: number
+ discount_amount: number 

## PatchUserDetailsReqeustDto (object)
+ name: string - Name must be between 5 and 20 characters.
+ birthDate: date - Birth Date must be in the format `yyyy-mm-dd`.
+ phoneNumber: string - 11-digit string consisting only of numbers. Phone Number must consist of 11 digits.

## DeliveryAddressRequestDto (object)
+ name: string - Name must be between 5 and 20 characters. name is a required field.
+ phoneNumber: string - Phone number must be between 10 and 15 characters. Phone number is a required field.
+ zipCode: number - Zip code is a required field.
+ address: string - Address must be between 5 and 200 characters. Address is a required field.
+ addressDetail: Address detail must be between 5 and 200 characters. Address detail is a required field.

## NoticeResponseDto (object)
+ id: number
+ title: string 
+ registrationDate: date 

## NoticeDetailResponseDto (object)
+ title: string 
+ content: string 
+ registrationDate: date 

## CouponSummaryResponseDto (object)
+ id: number
+ code: string
+ discountType: string
+ discountValue: number
+ expirationDate: date


## CouponDetailResponseDto (object)
+ id: number
+ code: string
+ discountType: string
+ discountValue: number
+ expirationDate: date
+ isValid: boolean
+ isUsed: boolean

## AddCartItemRequestDto (object)
+ quantity : number - Quantity must be greater than or equal to 1. Quantity is a required field.

## UpdateQuantityRequestDto (object)
+ quantity : number - Quantity must be greater than or equal to 1. Quantity is a required field.


## InquiryDetailResponseDto (object)
+ id: number
+ type: string 
+ itemName: string
+ title: string
+ content: string
+ status: string
+ registrationDate: date
+ responses (array[replyResponseDto])

### replyResponseDto (object)
+ id: number 
+ content: string 
+ registrationDate: date 
+ childResponses (array[replyResponseDto]) - A list of child responses related to this response

## InquiryResponseDto (object)
+ id: number
+ type: string 
+ itemName: string 
+ title: string 
+ status: string

## ItemSummaryResponseDto (object)
+ name: string
+ price: number
+ averageRating: number
+ image: string - URL of the representative image

## ItemImages (object)
+ url: string 

## ItemReviews (object)
+ title: string
+ username: string
+ registrationDate: date 
+ images (array[ItemImages])

## ItemDetailResponseDto (object)
+ name: string
+ price: number
+ averageRating: number
+ images (array[ItemImages])
+ stock: number

